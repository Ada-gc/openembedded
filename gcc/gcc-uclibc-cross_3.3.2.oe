inherit cross
include gcc-uclibc_${PV}.oe

DEPENDS = "virtual/${TARGET_PREFIX}binutils uclibc patcher-native"
PROVIDES = "virtual/${TARGET_PREFIX}gcc virtual/${TARGET_PREFIX}g++"

PACKAGES = ""
INHIBIT_PACKAGE_STRIP = 1

EXTRA_OECONF = "--with-local-prefix=${CROSS_DIR}/local \
                --with-gxx-include-dir=${CROSS_DIR}/${TARGET_SYS}/include/c++ \
                --enable-target-optspace \
                --disable-nls \
                --with-gnu-ld \
                --disable-__cxa_atexit \
                --enable-languages=c,c++ \
                --enable-shared \
                --enable-multilib \
		--enable-threads=posix \
                --program-prefix=${TARGET_PREFIX}"

export CPPFLAGS = ""
export CXXFLAGS = ""
export CFLAGS = ""
export LDFLAGS = ""

do_configure () {
	export CC="${BUILD_CC}"
	export AR="${TARGET_SYS}-ar"
	export RANLIB="${TARGET_SYS}-ranlib"
	export LD="${TARGET_SYS}-ld"
	export NM="${TARGET_SYS}-nm"
	oe_runconf
}

do_compile_prepend () {
	export CC="${BUILD_CC}"
	export AR_FOR_TARGET="${TARGET_SYS}-ar"
	export RANLIB_FOR_TARGET="${TARGET_SYS}-ranlib"
	export LD_FOR_TARGET="${TARGET_SYS}-ld"
	export NM_FOR_TARGET="${TARGET_SYS}-nm"
	export CC_FOR_TARGET="${CCACHE} ${TARGET_SYS}-gcc"
}

do_stage_append () {
	for d in info man share/doc share/locale ; do
		rm -rf ${CROSS_DIR}/$d
	done

	# These aren't useful on the cross toolchain
	rm -f ${CROSS_DIR}/bin/*gcov
	rm -f ${CROSS_DIR}/bin/*gccbug

	# Fix a few include links so cross builds are happier
	if [ ! -e ${STAGING_INCDIR}/c++ ]; then
		mkdir -p ${STAGING_INCDIR}
		ln -sf ${CROSS_DIR}/${TARGET_SYS}/include/c++ \
			${STAGING_INCDIR}/
	fi

	# We use libiberty from binutils
	rm -f ${CROSS_DIR}/lib/libiberty.a

	# We probably don't need this
	rmdir ${CROSS_DIR}/include || :

	# We don't really need to keep this around
	rm -rf ${CROSS_DIR}/share
}

# Kill the install so we get no packages (we're the cross compiler)
do_install () {
	:
}

