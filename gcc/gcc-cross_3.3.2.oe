include gcc_${PV}.oe
inherit cross
FILESDIR = ${@os.path.dirname(oe.data.getVar('FILE',d,1))}/gcc-${PV}

DEPENDS := virtual/${TARGET_PREFIX}binutils glibc patcher
PROVIDES := virtual/${TARGET_PREFIX}gcc virtual/${TARGET_PREFIX}g++

PACKAGES =

EXTRA_OECONF := --with-local-prefix=${CROSS_DIR}/local \
                --with-gxx-include-dir=${CROSS_DIR}/${TARGET_SYS}/include/c++ \
                --enable-target-optspace \
                --with-gnu-ld \
                --enable-languages=c,c++ \
                --enable-shared \
                --enable-multilib \
                --program-prefix=${TARGET_SYS}-

export CPPFLAGS =
export CXXFLAGS =
export CFLAGS =
export LDFLAGS =

do_configure () {
	export CC="${BUILD_CC}"
	export AR="${TARGET_SYS}-ar"
	export RANLIB="${TARGET_SYS}-ranlib"
	export LD="${TARGET_SYS}-ld"
	export NM="${TARGET_SYS}-nm"
	oe_runconf
}

do_compile_prepend () {
	export CC="${BUILD_CC}"
	export AR_FOR_TARGET="${TARGET_SYS}-ar"
	export RANLIB_FOR_TARGET="${TARGET_SYS}-ranlib"
	export LD_FOR_TARGET="${TARGET_SYS}-ld"
	export NM_FOR_TARGET="${TARGET_SYS}-nm"
	export CC_FOR_TARGET="${CCACHE} ${TARGET_SYS}-gcc"
}

do_stage_append () {
	for d in info man share/doc share/locale ; do
		rm -rf ${CROSS_DIR}/$d
	done

	# These aren't useful on the cross toolchain
	rm -f ${CROSS_DIR}/bin/*gcov
	rm -f ${CROSS_DIR}/bin/*gccbug

	# Fix a few include links so cross builds are happier
	if [ ! -e ${STAGING_DIR}/target/include/c++ ]; then
		mkdir -p ${STAGING_DIR}/target/include
		ln -s ${CROSS_DIR}/${TARGET_SYS}/include/c++ \
			${STAGING_DIR}/target/include/
	fi

	# We use libiberty from binutils
	rm -f ${CROSS_DIR}/lib/libiberty.a

	# We probably don't need these
	rmdir ${CROSS_DIR}/include || :

	# We don't really need to keep this around
	rm -rf ${CROSS_DIR}/share
}

# Kill the install so we get no packages (we're the cross compiler)
do_install () {
	:
}

