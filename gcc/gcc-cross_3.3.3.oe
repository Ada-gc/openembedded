include gcc_${PV}.oe
inherit cross
FILESDIR = "${@os.path.dirname(oe.data.getVar('FILE',d,1))}/gcc-${PV}"

DEPENDS = "virtual/${TARGET_PREFIX}binutils glibc patcher-native"
PROVIDES = "virtual/${TARGET_PREFIX}gcc virtual/${TARGET_PREFIX}g++"

PACKAGES = "libgcc"

EXTRA_OECONF = "--with-local-prefix=${CROSS_DIR}/${TARGET_SYS} \
		--with-gxx-include-dir=${CROSS_DIR}/${TARGET_SYS}/include/c++ \
		--disable-nls \
		--enable-threads=posix \
		--enable-symvers=gnu \
		--enable-__cxa_atexit \
		--enable-languages=c,c++,f77 \
		--enable-shared \
		--enable-c99 \
		--enable-long-long \
		--program-prefix=${TARGET_PREFIX} \
		${@['--with-headers=${CROSS_DIR}/${TARGET_SYS}/include', '']['${BUILD_SYS}' == '${HOST_SYS}']}"

FILES_libgcc = "/lib/libgcc_s.so.*"

export CPPFLAGS = ""
export CXXFLAGS = ""
export CFLAGS = ""
export LDFLAGS = ""

do_configure () {
	export CC="${BUILD_CC}"
	export AR="${TARGET_SYS}-ar"
	export RANLIB="${TARGET_SYS}-ranlib"
	export LD="${TARGET_SYS}-ld"
	export NM="${TARGET_SYS}-nm"
	rm -f ${CROSS_DIR}/lib/gcc-lib/${TARGET_SYS}/${PV}/libgcc_eh.a
	oe_runconf
}

do_compile_prepend () {
	export CC="${BUILD_CC}"
	export AR_FOR_TARGET="${TARGET_SYS}-ar"
	export RANLIB_FOR_TARGET="${TARGET_SYS}-ranlib"
	export LD_FOR_TARGET="${TARGET_SYS}-ld"
	export NM_FOR_TARGET="${TARGET_SYS}-nm"
	export CC_FOR_TARGET="${CCACHE} ${TARGET_SYS}-gcc"
}

do_stage_append () {
	for d in info man share/doc share/locale ; do
		rm -rf ${CROSS_DIR}/$d
	done

	# These aren't useful on the cross toolchain
	rm -f ${CROSS_DIR}/bin/*gcov
	rm -f ${CROSS_DIR}/bin/*gccbug

	# Fix a few include links so cross builds are happier
	if [ ! -e ${STAGING_INCDIR}/c++ ]; then
		mkdir -p ${STAGING_INCDIR}
		rm -f ${STAGING_INCDIR}/c++
		ln -sf ${CROSS_DIR}/${TARGET_SYS}/include/c++ \
			${STAGING_INCDIR}/
	fi

	# We use libiberty from binutils
	rm -f ${CROSS_DIR}/lib/libiberty.a

	# We probably don't need these
	rmdir ${CROSS_DIR}/include || :

	# We don't really need to keep this around
	rm -rf ${CROSS_DIR}/share
}

python do_package() {
	if oe.data.getVar('DEBIAN_NAMES', d, 1):
		oe.data.setVar('PKG_libgcc', 'libgcc1', d)
	oe.build.exec_func('package_do_package', d)
}

do_install () {
	oe_runmake 'DESTDIR=${D}' install

	# Move libgcc_s into /lib
	mkdir -p ${D}/lib
	if [ "${BUILD_SYS}" == "${TARGET_SYS}" ]; then
		# native builds drop one pathname component
		mv -f ${D}/${prefix}/lib/libgcc_s.so.* ${D}/lib
	else
		mv -f ${D}/${prefix}/*/lib/libgcc_s.so.* ${D}/lib
	fi
}
