inherit autotools

DESCRIPTION = "The GNU cc and gcc C compilers."
LICENSE = "GPL"
MAINTAINER = "Gerald Britton <gbritton@doomcom.org>"

#
# For now, we will skip building of a gcc package if it is a uclibc one
# and our build is not a uclibc one, and we skip a glibc one if our build
# is a uclibc build.
#
# See the note in gcc/gcc_3.4.0.oe
#

python __anonymous () {
    import oe, re
    uc_pkg = (re.search('uclibc', oe.data.getVar('PN', d, 1)) != None)
    uc_os = (re.match('.*uclibc$', oe.data.getVar('TARGET_OS', d, 1)) != None)
    if uc_pkg != uc_os:
        raise oe.parse.SkipPackage("incompatible with target %s" %
                                   oe.data.getVar('TARGET_OS', d, 1))
}

DEPENDS = "glibc"

PACKAGES = "${PN} ${PN}-symlinks \
            ${PN}-c++ ${PN}-c++-symlinks \
            libgcc libstdc++ libstdc++-dev \
            ${PN}-doc"

FILES_${PN} = "${bindir}/${TARGET_PREFIX}gcc \
	       ${bindir}/${TARGET_PREFIX}cpp \
	       ${bindir}/${TARGET_PREFIX}gcov \
	       ${bindir}/${TARGET_PREFIX}gccbug \
	       ${libdir}/gcc-lib/${TARGET_SYS}/${PV}/cc1 \
	       ${libdir}/gcc-lib/${TARGET_SYS}/${PV}/collect2 \
	       ${libdir}/gcc-lib/${TARGET_SYS}/${PV}/crt* \
	       ${libdir}/gcc-lib/${TARGET_SYS}/${PV}/specs \
	       ${libdir}/gcc-lib/${TARGET_SYS}/${PV}/lib* \
	       ${libdir}/gcc-lib/${TARGET_SYS}/${PV}/include"

FILES_${PN}-symlinks = "${bindir}/cc \
			${bindir}/gcc \
			${bindir}/cpp \
			${bindir}/gcov \
			${bindir}/gccbug"

FILES_${PN}-c++ = "${bindir}/${TARGET_PREFIX}g++ \
		   ${libdir}/gcc-lib/${TARGET_SYS}/${PV}/cc1plus"

FILES_${PN}-c++-symlinks = "${bindir}/c++ \
			    ${bindir}/g++"

FILES_libgcc = "/lib/libgcc_s.so.*"

FILES_libstdc++ = "${libdir}/libstdc++.so.*"

FILES_libstdc++-dev = "${includedir}/c++/${PV} \
		       ${libdir}/libstdc++.so \
		       ${libdir}/libstdc++.la \
		       ${libdir}/libstdc++.a \
		       ${libdir}/libsupc++.la \
		       ${libdir}/libsupc++.a"

FILES_${PN}-doc = "${infodir} \
		   ${mandir} \
		   ${libdir}/gcc-lib/${TARGET_SYS}/${PV}/include/README"

SRC_URI = "${GNU_MIRROR}/gcc/releases/gcc-${PV}/gcc-${PV}.tar.bz2 \
	   file://${FILESDIR}/config.sub.patch;patch=1 \
	   file://${FILESDIR}/empty6.patch;patch=1 \
	   file://${FILESDIR}/pr10392-1-test.patch;patch=1 \
	   file://${FILESDIR}/pr10412-1-test.patch;patch=1 \
	   file://${FILESDIR}/pr10589-1-test.patch;patch=1 \
	   file://${FILESDIR}/pr11162-1-test.patch;patch=1 \
	   file://${FILESDIR}/pr11587-1-test.patch;patch=1 \
	   file://${FILESDIR}/pr11608.patch;patch=1 \
	   file://${FILESDIR}/pr11736-1-test.patch;patch=1 \
	   file://${FILESDIR}/pr11864-1-test.patch;patch=1 \
	   file://${FILESDIR}/pr12009.patch;patch=1 \
	   file://${FILESDIR}/pr12010.patch;patch=1 \
	   file://${FILESDIR}/pr13260-test.patch;patch=1 \
	   file://${FILESDIR}/pr9365-1-test.patch;patch=1 \
	   file://${FILESDIR}/sh-lib1funcs_sizeAndType.patch;patch=1 \
	   file://${FILESDIR}/sh-pic-set_fpscr-gcc-3.3.2.patch;patch=1 \
	   file://${FILESDIR}/thunk3.patch;patch=1 \
	   file://${FILESDIR}/arm-10730.dpatch;patch=1;pnum=0 \
	   file://${FILESDIR}/arm-12527.dpatch;patch=1;pnum=0 \
	   file://${FILESDIR}/arm-14558.dpatch;patch=1;pnum=0 \
	   file://${FILESDIR}/arm-common.dpatch;patch=1;pnum=0 \
	   file://${FILESDIR}/arm-gotoff.dpatch;patch=1;pnum=0 \
	   file://${FILESDIR}/arm-ldm.dpatch;patch=1;pnum=0 \
	   file://${FILESDIR}/arm-tune.patch;patch=1;pnum=0 \
	   file://${FILESDIR}/arm-xscale.patch;patch=1;pnum=0 \
	   file://${FILESDIR}/arm-14302.patch;patch=1;pnum=0 \
	   file://${FILESDIR}/arm-ldm-peephole.patch;patch=1;pnum=0 \
	   file://${FILESDIR}/libibery-crosstool.patch;patch=1;pnum=1 \
	   file://${FILESDIR}/reverse-compare.patch;patch=1"

MIRRORS_prepend () {
${GNU_MIRROR}/gcc/releases/	http://gcc.get-software.com/releases/
}

S = "${WORKDIR}/gcc-${PV}"
B = "${S}/build.${HOST_SYS}.${TARGET_SYS}"

EXTRA_OECONF = "--with-local-prefix=${prefix}/local \
                --with-gxx-include-dir=${includedir}/c++/${PV} \
                --enable-target-optspace \
                --disable-nls \
                --with-gnu-ld \
                --disable-__cxa_atexit \
                --enable-languages=c,c++ \
                --enable-shared \
                --enable-multilib \
                --program-prefix=${TARGET_PREFIX}"

do_configure () {
	# Setup these vars for cross building only
	if [ "${BUILD_SYS}" != "${HOST_SYS}" ]; then
		export CC_FOR_TARGET="${CCACHE} ${HOST_PREFIX}gcc"
		export GCC_FOR_TARGET="${CCACHE} ${HOST_PREFIX}gcc"
		export CXX_FOR_TARGET="${CCACHE} ${HOST_PREFIX}g++"
		export AS_FOR_TARGET="${HOST_PREFIX}as"
		export LD_FOR_TARGET="${HOST_PREFIX}ld"
		export NM_FOR_TARGET="${HOST_PREFIX}nm"
		export AR_FOR_TARGET="${HOST_PREFIX}ar"
		export RANLIB_FOR_TARGET="${HOST_PREFIX}ranlib"
	fi
	oe_runconf
}

do_install () {
	autotools_do_install

	# Cleanup some of the gcc-lib stuff
	rm -rf ${D}/${libdir}/gcc-lib/${TARGET_SYS}/${PV}/install-tools

	# Move libgcc_s into /lib
	mkdir -p ${D}/lib
	mv -f ${D}/${libdir}/libgcc_s.so.* ${D}/lib
	rm -f ${D}/${libdir}/libgcc_s.so
	ln -s `echo ${libdir}/gcc-lib/${TARGET_SYS}/${PV} | tr -s / |
		sed -e 's,^/,,' -e 's,[^/]*,..,g'`/lib/libgcc_s.so.? \
		${D}/${libdir}/gcc-lib/${TARGET_SYS}/${PV}/libgcc_s.so

	# Cleanup manpages..
	rm -rf ${D}/${mandir}/man7
	mv ${D}/${mandir}/man1/cpp.1 \
	   ${D}/${mandir}/man1/${TARGET_SYS}-cpp.1
	mv ${D}/${mandir}/man1/gcov.1 \
	   ${D}/${mandir}/man1/${TARGET_SYS}-gcov.1

	# We use libiberty from binutils
	rm -f ${D}/${libdir}/libiberty.a

	cd ${D}/${bindir}

	# We care about g++ not c++
	rm -f *c++

	# We don't care about the gcc-<version> ones for this
	rm -f *gcc-?.?*

	# These sometimes show up, they are strange, we remove them
	rm -f ${TARGET_ARCH}-*${TARGET_ARCH}-*

	# Symlinks so we can use these trivially on the target
	ln -s ${TARGET_SYS}-g++ g++
	ln -s ${TARGET_SYS}-gcc gcc
	ln -s g++ c++
	ln -s gcc cc
}
