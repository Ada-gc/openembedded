DESCRIPTION = "C library for embedded systems"
LICENSE = "LGPL"
SECTION = "libs"
PRIORITY = "required"
MAINTAINER = "Gerald Britton <gbritton@doomcom.org>"

#
# For now, we will skip building of a gcc package if it is a uclibc one
# and our build is not a uclibc one, and we skip a glibc one if our build
# is a uclibc build.
#
# See the note in gcc/gcc_3.4.0.oe
#

python __anonymous () {
    import oe, re
    uc_os = (re.match('.*uclibc$', oe.data.getVar('TARGET_OS', d, 1)) != None)
    if not uc_os:
        raise oe.parse.SkipPackage("incompatible with target %s" %
                                   oe.data.getVar('TARGET_OS', d, 1))
}

#
# We can only work currently with a predefined .config, this ensures we have
# one.  In the future, this may want to respect ${MACHINE} as well.
#

python __anonymous () {
    import oe, os;
    conf = (oe.data.getVar('FILESDIR', d, 1) + "/uClibc.config." +
            oe.data.getVar('TARGET_ARCH', d, 1))
    if not os.access(conf, os.R_OK):
        raise oe.parse.SkipPackage("no available .config for target %s" %
                                   oe.data.getVar('TARGET_OS', d, 1))
}

PROVIDES = "virtual/libc"
DEPENDS = "virtual/${TARGET_PREFIX}binutils \
	   virtual/${TARGET_PREFIX}gcc-initial"

#
# This locale file gets copied into uClibc-${PV}/extra/locale/ prior to
# build, it does not need to be unpacked, but we can't inhibit the unpacking
# in the current build system.
#
UCLIBC_LOCALE_FILE = "uClibc-locale-030818.tgz"
FILESDIR = "${@os.path.dirname(oe.data.getVar('FILE',d,1))}/uclibc-${PV}"
SRC_URI = "http://www.uclibc.org/downloads/uClibc-${PV}.tar.bz2 \
           http://www.uclibc.org/downloads/${UCLIBC_LOCALE_FILE} \
           http://www.uclibc.org/downloads/toolchain/kernel-headers-2.4.21.tar.bz2"

S = "${WORKDIR}/uClibc-${PV}"

UCLIBC_PREFIX = "${CROSS_DIR}/${TARGET_SYS}"
UCLIBC_STAGE_PREFIX = "${STAGING_DIR}/${HOST_SYS}"

EXTRA_OEMAKE = ""

uclibcbuild_do_patch() {
	rm -f ${WORKDIR}/linux/include/asm
	ln -sf asm-${TARGET_ARCH} ${WORKDIR}/linux/include/asm

	touch ${WORKDIR}/linux/include/linux/autoconf.h

	echo "#define UTS_RELEASE \"2.4.21\"" > ${WORKDIR}/linux/include/linux/version.h
	echo "#define LINUX_VERSION_CODE 132117" >> ${WORKDIR}/linux/include/linux/version.h
	echo "#define KERNEL_VERSION(a,b,c) (((a) << 16) + ((b) << 8) + (c))" \
		>> ${WORKDIR}/linux/include/linux/version.h

	if [ -f ${FILESDIR}/uClibc.config.${TARGET_ARCH} ]; then
		cp ${FILESDIR}/uClibc.config.${TARGET_ARCH} ${S}/.config
	else
		echo ERROR: No target specific config for ${TARGET_ARCH}
		return 1
	fi

	perl -i -p -e 's,^CROSS=.*,TARGET_ARCH=${TARGET_ARCH}\nCROSS=${TARGET_PREFIX},g' ${S}/Rules.mak
	perl -i -p -e 's,^KERNEL_SOURCE=.*,KERNEL_SOURCE=\"${WORKDIR}/linux\",g' ${S}/.config
	perl -i -p -e 's,^RUNTIME_PREFIX=.*,RUNTIME_PREFIX=\"/\",g' ${S}/.config
	perl -i -p -e 's,^DEVEL_PREFIX=.*,DEVEL_PREFIX=\"/${prefix}\",g' ${S}/.config
	perl -i -p -e 's,^SHARED_LIB_LOADER_PATH=.*,SHARED_LIB_LOADER_PATH=\"/lib\",g' ${S}/.config
	perl -i -p -e 's,.*UCLIBC_HAS_WCHAR.*,UCLIBC_HAS_WCHAR=y\nUCLIBC_HAS_LOCALE=n,g' ${S}/.config

	cp ${DL_DIR}/${UCLIBC_LOCALE_FILE} extra/locale

	make oldconfig
}

python do_patch () {
	oe.build.exec_func('base_do_patch', d)
	oe.build.exec_func('uclibcbuild_do_patch', d)
}

do_stage() {
	# Install into the cross dir (this MUST be done first because we
	# will install crt1.o in the install_dev stage and gcc needs it)
	make PREFIX= DEVEL_PREFIX=${UCLIBC_PREFIX}/ \
		RUNTIME_PREFIX=${UCLIBC_PREFIX}/ \
		install_dev install_runtime install_utils

	# We don't really need this
	rm -f ${UCLIBC_PREFIX}/include/.cvsignore

	# Fixup shared lib symlinks
	( cd ${UCLIBC_STAGE_PREFIX}/lib
		for f in c crypt dl m nsl pthread resolv thread_db util; do
			ln -sf lib${f}.so.? lib${f}.so
		done
	)

	# Install into the staging dir
	make PREFIX= DEVEL_PREFIX=${UCLIBC_STAGE_PREFIX}/ \
		RUNTIME_PREFIX=${UCLIBC_STAGE_PREFIX}/ \
		install_dev install_runtime install_utils

	# We don't really need this
	rm -f ${UCLIBC_STAGE_PREFIX}/include/.cvsignore

	# Fixup shared lib symlinks
	( cd ${UCLIBC_STAGE_PREFIX}/lib
		for f in c crypt dl m nsl pthread resolv thread_db util; do
			ln -sf lib${f}.so.? lib${f}.so
		done
	)
}

do_install() {
	make PREFIX=${D} DEVEL_PREFIX=${prefix}/ RUNTIME_PREFIX=/ \
		install_dev install_runtime install_utils

	# We don't really need this in /usr/include
	rm -f ${D}/${prefix}/include/.cvsignore
}

