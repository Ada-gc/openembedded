#############################################################################
#                                                                           #
#  You should *NOT* edit this file. Instead, edit ${OEDIR}/conf/local.conf  #
#                                                                           #
#               #                                                           #
#              ###                                                          #
#             #####                                                         #
#               #                                                           #
#               #                                                           #
#               #                                                           #
#               #                                                           #
#                                                                           #
#                                                                           #
# This looks like a shell file, but it isn't. All variables get expanded    #
# after ALL config files have been read in. This allows you to override     #
# anything.                                                                 #
#                                                                           #
# The following config files will be read (if existent):                    #
#                                                                           #
# ${OEDIR}/conf/oe.conf                                                     #
# ${OEDIR}/conf/local.conf                                                  #
# <current-dir>/oe.conf                                                     #
# ${OEDIR}/conf/auto.conf                                                   #
# ${OEDIR}/conf/${DISTRO}.conf                                              #
# ${OEDIR}/conf/${BUILD_SYS}.conf                                           #
# ${OEDIR}/conf/${SYS}.conf                                                 #
# ${OEDIR}/conf/${MACHINE}.conf                                             #
#                                                                           #
# DISTRO is something like 'mandrake82' or 'debian3'                        #
# BUILD_SYS is made of BUILD_ARCH and BUILD_OS and like 'i686-linux'        #
# SYS is made of ARCH and OS and like 'arm-linux'                           #
# MACHINE is something like 'collie', 'corgie' or 'ramses'                  #
#                                                                           #
# The auto.conf file will be automatically generated, either by something   #
# like "./configure" or by something like "make menuconfig".                #
#                                                                           #
#############################################################################

###
### Date/time variables
###

DATE := "${@time.strftime('%Y%m%d',time.gmtime())}"
TIME := "${@time.strftime('%H%M%S',time.gmtime())}"
DATETIME = "${DATE}${TIME}"

# Variable that controls the date CVS HEAD checkouts are pulled from.
# Defaults to today.
CVSDATE = "${DATE}"

CACHE = "${TMPDIR}/cache"

###
### Package default variables
###
PN = "${@oe.parse.OEHandler.vars_from_file(oe.data.getVar('FILE',d),d)[0] or 'defaultpkgname'}"
PV = "${@oe.parse.OEHandler.vars_from_file(oe.data.getVar('FILE',d),d)[1] or '1.0'}"
PR = "${@oe.parse.OEHandler.vars_from_file(oe.data.getVar('FILE',d),d)[2] or 'r0'}"
PF = "${PN}-${PV}-${PR}"
P = "${PN}-${PV}"

SECTION = "base"
PRIORITY = "optional"
DESCRIPTION = "Version ${PV}-${PR} of package ${PN}"
LICENSE = "unknown"
MAINTAINER = "OpenEmbedded Team <oe@handhelds.org>"
HOMEPAGE = "unknown"
DEPENDS = ""
RDEPENDS = ""
PROVIDES = ""
PROVIDES_prepend = "${P} ${PF} ${PN} "
RPROVIDES = ""

PACKAGES = "${PN} ${PN}-doc ${PN}-dev ${PN}-locale"
FILES = ""
FILES_${PN} = "${bindir} ${sbindir} ${libexecdir} ${libdir}/lib*.so.* \
	    ${sysconfdir} ${sharedstatedir} ${localstatedir} \
	    /bin /sbin /lib/*.so* ${datadir}/${PN} ${libdir}/${PN} \
	    ${datadir}/pixmaps ${datadir}/applications \
	    ${datadir}/idl ${datadir}/omf ${datadir}/sounds \
	    ${libdir}/bonobo/servers"
FILES_${PN}-doc = "${datadir}/doc ${mandir} ${infodir} ${datadir}/gtk-doc \
	    ${datadir}/gnome/help"
FILES_${PN}-dev = "${includedir} ${libdir}/lib*.so ${libdir}/*.la \
		${libdir}/*.a ${libdir}/*.o ${libdir}/pkgconfig \
		/lib/*.a /lib/*.o ${datadir}/aclocal"
FILES_${PN}-locale = "${datadir}/locale"

###
### Directories for the Buildsystem
###

# Temporary directory
TMPDIR = "${TOPDIR}/tmp"

# Download directory
DL_DIR = "${TMPDIR}/downloads"

# Stamps mark tasks that are done
STAMP = "${TMPDIR}/stamps/${PF}"

# File Manifest
export MANIFEST = "${FILESDIR}/manifest"

FILE_DIRNAME = "${@os.path.dirname(oe.data.getVar('FILE', d))}"
FILESPATH = "${FILE_DIRNAME}/${PF}:${FILE_DIRNAME}/${P}:${FILE_DIRNAME}/${PN}:${FILE_DIRNAME}/files:${FILE_DIRNAME}"
FILESDIR = "${@oe.which(oe.data.getVar('FILESPATH', d, 1), '.')}"

# Per package directories

# overall work area
WORKDIR = "${TMPDIR}/work/${PF}"

# shell script output and log area
T = "${WORKDIR}/temp"

# do_install output area
D = "${WORKDIR}/image"

# default source tree path
S = "${WORKDIR}/${P}"

# default build path
B = "${S}"

# slot - currently unused by OE. portage remnants
SLOT = "0"

# default source is just the .oe
SRC_URI = "file://${FILE}"

# Staging area - used to handle inter-package dependency
STAGING_DIR = "${TMPDIR}/staging"
STAGING_BINDIR = "${STAGING_DIR}/${BUILD_SYS}/bin"
STAGING_LIBDIR = "${STAGING_DIR}/${HOST_SYS}/lib"
STAGING_INCDIR = "${STAGING_DIR}/${HOST_SYS}/include"
STAGING_DATADIR = "${STAGING_DIR}/${HOST_SYS}/share"


# output packages
DEPLOY_DIR = "${TMPDIR}/deploy"
DEPLOY_DIR_TAR = "${DEPLOY_DIR}/tar"
DEPLOY_DIR_IPK = "${DEPLOY_DIR}/ipk"
DEPLOY_DIR_RPM = "${DEPLOY_DIR}/rpm"

#
# bootstrap things
#
BOOTSTRAP_EXTRA_DEPENDS = ""
BOOTSTRAP_EXTRA_RDEPENDS = ""
BOOTSTRAP_EXTRA_RRECOMMENDS = ""

# image creation and rootfs population
DEPLOY_DIR_IMAGE = "${DEPLOY_DIR}/images"
IMAGE_ROOTFS = "${TMPDIR}/rootfs"
PACKAGE_ARCH = "${TARGET_ARCH}"
MACHINE_ARCH = "${MACHINE}"

#IMAGE_DEPENDS = ""
#IMAGE_DEPENDS_jffs2 = "mtd-buildarch"

IMAGE_BASENAME = "rootfs"
IMAGE_NAME = "${IMAGE_BASENAME}-${MACHINE}-${DATETIME}"
IMAGE_CMD = ""
IMAGE_CMD_jffs2 = "mkfs.jffs2 --root=${IMAGE_ROOTFS} --faketime \
		   --output=${DEPLOY_DIR_IMAGE}/${IMAGE_NAME}.rootfs.jffs2 \
		   ${EXTRA_IMAGECMD}"
IMAGE_CMD_cramfs = "mkcramfs ${IMAGE_ROOTFS} ${DEPLOY_DIR_IMAGE}/${IMAGE_NAME}.rootfs.cramfs ${EXTRA_IMAGECMD}"
IMAGE_CMD_tar = "cd ${IMAGE_ROOTFS} && tar -jcvf ${DEPLOY_DIR_IMAGE}/${IMAGE_NAME}.rootfs.tar.bz2 ."
EXTRA_IMAGECMD = ""
EXTRA_IMAGECMD_jffs2 = "--pad --little-endian --eraseblock=0x40000"

IMAGE_FSTYPE = "jffs2"

EXTRA_IMAGEDEPENDS = ""

# minimum kernel version that we support
OLDEST_KERNEL = "2.4.0"

# toolchain things
CROSS_DIR = "${TMPDIR}/cross"
CROSS_DATADIR = "${CROSS_DIR}/share"

# Add staging and cross to the PATH
export PATH_prepend = "${STAGING_BINDIR}:${CROSS_DIR}/bin:"

# palmtop things - opie, qtopia
export QTDIR = "${STAGING_DIR}/${HOST_SYS}"
export QPEDIR = "${STAGING_DIR}/${HOST_SYS}"
export OPIEDIR = "${STAGING_DIR}/${HOST_SYS}"
export palmtopdir = "/opt/QtPalmtop"
export palmqtdir = "/opt/QtPalmtop"

# target filesystem paths
export prefix = "/usr"
export exec_prefix = "${prefix}"

export bindir = "${exec_prefix}/bin"
export sbindir = "${exec_prefix}/sbin"
export libexecdir = "${exec_prefix}/libexec"
export datadir = "${prefix}/share"
export sysconfdir = "/etc"
export sharedstatedir = "${prefix}/com"
export localstatedir = "/var"
export libdir = "${exec_prefix}/lib"
export includedir = "${prefix}/include"
export oldincludedir = "/usr/include"
export infodir = "${datadir}/info"
export mandir = "${datadir}/man"
export docdir = "${datadir}/doc"

###
### Mirrors and download
###

GNU_MIRROR = "ftp://ftp.gnu.org/gnu"
DEBIAN_MIRROR = "ftp://ftp.debian.org/debian/pool"
SOURCEFORGE_MIRROR = "http://aleron.dl.sourceforge.net/sourceforge"
GPE_MIRROR = "http://gpe.handhelds.org/pub/projects/gpe/source"
XLIBS_MIRROR = "http://freedesktop.org/~xlibs/release"
GNOME_MIRROR = "http://ftp.gnome.org/pub/GNOME/sources"

# You can use the mirror of your country to get faster downloads by putting
#	export DEBIAN_MIRROR = "ftp://ftp.de.debian.org/debian/pool"
#	export SOURCEFORGE_MIRROR = "http://belnet.dl.sourceforge.net/sourceforge"
# into ${OEDIR}/local.conf

FETCHCOMMAND = ""
FETCHCOMMAND_wget = "/usr/bin/env wget -t 5 --passive-ftp -P ${DL_DIR} ${URI}"
FETCHCOMMAND_cvs = "/usr/bin/env cvs -d${CVSROOT} co ${CVSCOOPTS} ${CVSMODULE}"
RESUMECOMMAND = ""
RESUMECOMMAND_wget = "/usr/bin/env wget -c -t 5 --passive-ftp -P ${DL_DIR} ${URI}"

MKTEMPDIRCMD = "mktemp -d -q ${TMPBASE}"
MKTEMPCMD = "mktemp -q ${TMPBASE}"


###
### Compilation control
###

# NOTE: _VENDOR fields must be either empty or start with a -

# build vars
BUILD_ARCH = "${@os.uname()[4]}"
BUILD_OS = "${@os.uname()[0].lower()}"
BUILD_VENDOR = ""

BUILD_SYS = "${BUILD_ARCH}${BUILD_VENDOR}-${BUILD_OS}"
BUILD_PREFIX = ""
BUILD_CC_ARCH = ""

# host vars (either target or build)
HOST_ARCH = "${TARGET_ARCH}"
HOST_OS = "${TARGET_OS}"
HOST_VENDOR = "${TARGET_VENDOR}"

HOST_SYS = "${HOST_ARCH}${HOST_VENDOR}-${HOST_OS}"
HOST_PREFIX = "${TARGET_PREFIX}"
HOST_CC_ARCH = "${TARGET_CC_ARCH}"

# target vars
TARGET_ARCH = "${BUILD_ARCH}"
TARGET_OS = "${BUILD_OS}"
TARGET_VENDOR = "${BUILD_VENDOR}"

TARGET_SYS = "${TARGET_ARCH}${TARGET_VENDOR}-${TARGET_OS}"
TARGET_PREFIX = "${TARGET_SYS}-"
TARGET_CC_ARCH = ""

# Which flags to leave by strip-flags() in bin/build/oebuild.sh ?
ALLOWED_FLAGS = "-O -mcpu -march -pipe"

# Optimization flags
FULL_OPTIMIZATION = "-fexpensive-optimizations -fomit-frame-pointer -frename-registers -O2"
DEBUG_OPTIMIZATION = "-O -g"
SELECTED_OPTIMIZATION := "${@oe.data.getVar(['FULL_OPTIMIZATION', 'DEBUG_OPTIMIZATION'][oe.data.getVar('DEBUG_BUILD', d, 1) == '1'], d, 1)}"
# XXX unused?
OPTIMIZATION = "-O2"

# flags
export BUILD_CPPFLAGS = "-I${STAGING_DIR}/${BUILD_SYS}/include"
export CPPFLAGS = "${TARGET_CPPFLAGS}"
export TARGET_CPPFLAGS = "-I${STAGING_DIR}/${TARGET_SYS}/include"

export BUILD_CFLAGS = "${BUILD_CPPFLAGS} ${SELECTED_OPTIMIZATION}"
export CFLAGS = "${TARGET_CFLAGS}"
export TARGET_CFLAGS = "${TARGET_CPPFLAGS} ${SELECTED_OPTIMIZATION}"

export BUILD_CXXFLAGS = "${BUILD_CFLAGS} -fpermissive"
export CXXFLAGS = "${TARGET_CXXFLAGS}"
export TARGET_CXXFLAGS = "${TARGET_CFLAGS} -fpermissive"

export BUILD_LDFLAGS = "-L${STAGING_DIR}/${BUILD_SYS}/lib \
			-Wl,-rpath-link,${STAGING_DIR}/${BUILD_SYS}/lib \
			-Wl,-rpath,${STAGING_DIR}/${BUILD_SYS}/lib"
export LDFLAGS = "${TARGET_LDFLAGS}"
export TARGET_LDFLAGS = "-L${STAGING_DIR}/${TARGET_SYS}/lib \
			 -Wl,-rpath-link,${STAGING_DIR}/${TARGET_SYS}/lib \ 
			 -Wl,-rpath,${libdir}"

# host vars (can be either target or build, based on CROSS variable)
export CC = "${CCACHE}${HOST_PREFIX}gcc ${HOST_CC_ARCH}"
export CXX = "${CCACHE}${HOST_PREFIX}g++ ${HOST_CC_ARCH}"
export F77 = "${CCACHE}${HOST_PREFIX}g77 ${HOST_CC_ARCH}"
export CPP = "${HOST_PREFIX}gcc -E"
export LD = "${HOST_PREFIX}ld"
export CCLD = "${HOST_PREFIX}gcc"
export AR = "${HOST_PREFIX}ar"
export RANLIB = "${HOST_PREFIX}ranlib"
export STRIP = "${HOST_PREFIX}strip"

# Flags to compile stuff for the build host:
export BUILD_CC = "${CCACHE}${BUILD_PREFIX}gcc ${BUILD_CC_ARCH}"
export BUILD_CXX = "${CCACHE}${BUILD_PREFIX}g++ ${BUILD_CC_ARCH}"
export BUILD_F77 = "${CCACHE}${BUILD_PREFIX}g77 ${BUILD_CC_ARCH}"
export BUILD_CPP = "${BUILD_PREFIX}cpp"
export BUILD_LD = "${BUILD_PREFIX}ld"
export BUILD_CCLD = "${BUILD_PREFIX}gcc"
export BUILD_AR = "${BUILD_PREFIX}ar"
export BUILD_RANLIB = "${BUILD_PREFIX}ranlib"
export BUILD_STRIP = "${BUILD_PREFIX}strip"

# Other
CCACHE = "${@oe.which(oe.data.getVar('PATH', d), 'ccache') and 'ccache '}"
export MAKE = "make"
EXTRA_OEMAKE = "-e MAKEFLAGS="

export PKG_CONFIG_PATH = "${STAGING_DATADIR}/pkgconfig"
export PKG_CONFIG_DISABLE_UNINSTALLED = "yes"

export QMAKE_MKSPEC_PATH = "${STAGING_DIR}/${BUILD_SYS}/share/qmake"
export STAGING_SIPDIR = "${STAGING_DIR}/${BUILD_SYS}/share/sip"
export STAGING_IDLDIR = "${STAGING_DATADIR}/idl"

# Kernel Stuff
STAGING_KERNEL_DIR = "${STAGING_DIR}/${HOST_SYS}/kernel"


# default test results for autoconf
#	possible candidate for moving into autotools.oeclass -CL
export CONFIG_SITE = "${@oe.which(oe.data.getVar('OEPATH', d, 1), 'site/%s-%s' % (oe.data.getVar('HOST_ARCH', d, 1), oe.data.getVar('HOST_OS', d, 1)))}"

# library package naming
AUTO_LIBNAME_PKGS = "${PACKAGES}"

###
### Config file processing
###

# This means that an envionment variable named '<foo>_arm' overrides an
# environment variable '<foo>' (when ${TARGET_ARCH} is arm). And the same: an
# environment variable '<foo>_ramses' overrides both '<foo>' and '<foo>_arm
# when ${MACHINE} is 'ramses'. And finally '<foo>_local' overrides anything.
#
# This works for  functions as well, they are really just environment variables.

OVERRIDES = "local:${MACHINE}:${TARGET_OS}:${TARGET_ARCH}"

# Read rest of config files:

include conf/oe.conf
include conf/site.conf
include conf/auto.conf
include conf/local.conf
include conf/${MACHINE}.conf
include conf/${DISTRO}.conf
include conf/${BUILD_SYS}.conf
include conf/${TARGET_SYS}.conf
