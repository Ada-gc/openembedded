diff -Naur linux-2.6.9/drivers/net/8390.c linux-2.6.9-patched/drivers/net/8390.c
--- linux-2.6.9/drivers/net/8390.c	2004-10-18 23:53:21.000000000 +0200
+++ linux-2.6.9-patched/drivers/net/8390.c	2005-09-12 11:09:06.000000000 +0200
@@ -70,6 +70,7 @@
 #include <linux/interrupt.h>
 #include <linux/init.h>
 #include <linux/crc32.h>
+#include <linux/proc_fs.h>
 
 #include <linux/netdevice.h>
 #include <linux/etherdevice.h>
@@ -977,6 +978,26 @@
 	spin_unlock_irqrestore(&ei_local->page_lock, flags);
 }	
 
+#if defined(CONFIG_DM7020)
+static int dream_mode, proc_initialized;
+
+static int read_net_dream_mode(char *buf, char **start, off_t offset, int len,int *eof ,void *private)
+{
+	return sprintf(buf, "%d\n", dream_mode);
+}
+
+static int write_net_dream_mode(struct file *file, const char __user *buffer, unsigned long count, void *data)
+{
+	if (!count)
+		return -EINVAL;
+	if ( sscanf(buffer, "%d", &dream_mode) == 1 )
+		printk("set net_dream_mode to %d\n", dream_mode);
+	else
+		printk("set net_dream_mode failed\n");
+	return count;
+}
+#endif
+
 /**
  * ethdev_setup - init rest of 8390 device struct
  * @dev: network device structure to init
@@ -995,6 +1016,31 @@
 	dev->get_stats	= get_stats;
 	dev->set_multicast_list = &set_multicast_list;
 
+#if defined(CONFIG_DM7020)
+	if ( !proc_initialized )
+	{
+		proc_initialized=1;
+		struct proc_dir_entry *proc_net_dream_mode;
+		if (!proc_net)
+		{
+			printk("[8390] /proc/net/ does not exist");
+			return -ENOENT;
+		}
+
+		proc_net_dream_mode = create_proc_entry("dream_mode", 0, proc_net);
+
+		if (!proc_net_dream_mode)
+		{
+			printk("[8390] Could not create /proc/net/dream_mode");
+			return -ENOENT;
+		}
+
+		proc_net_dream_mode->read_proc = &read_net_dream_mode;
+		proc_net_dream_mode->write_proc = &write_net_dream_mode;
+		proc_net_dream_mode->owner = THIS_MODULE;
+	}
+#endif
+
 	ether_setup(dev);
 
 	spin_lock_init(&ei_local->page_lock);
@@ -1106,6 +1149,26 @@
 	outb_p(length >> 8, e8390_base + EN0_TCNTHI);
 	outb_p(start_page, e8390_base + EN0_TPSR);
 	outb_p(E8390_NODMA+E8390_TRANS+E8390_START, e8390_base+E8390_CMD);
+
+#if defined(CONFIG_DM7020)
+	if ( dream_mode )
+	{
+		unsigned long dma_start = jiffies;
+
+		while ((inb_p(e8390_base + EN0_ISR) & 2) == 0)
+		if (jiffies - dma_start > 20*HZ/100) {  /* 200ms */
+			printk(KERN_WARNING "%s: timeout waiting for PTX.\n", dev->name);
+			break;
+		}
+
+		outb_p(2, e8390_base + EN0_ISR);
+
+		outb_p(length & 0xff, e8390_base + EN0_TCNTLO);
+		outb_p(length >> 8, e8390_base + EN0_TCNTHI);
+		outb_p(start_page, e8390_base + EN0_TPSR);
+		outb_p(E8390_NODMA+E8390_TRANS+E8390_START, e8390_base+E8390_CMD);
+	}
+#endif
 }
 
 EXPORT_SYMBOL(ei_open);
