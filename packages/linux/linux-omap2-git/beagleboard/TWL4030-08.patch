X-Mozilla-Status: 0001
X-Mozilla-Status2: 00000000
Return-Path: <linux-omap-owner@vger.kernel.org>
X-Spam-Checker-Version: SpamAssassin 3.2.2 (2007-07-23) on
	morningsun.geekisp.com
X-Spam-Level: 
X-Spam-Status: No, score=-3.0 required=5.0 tests=AWL,DKIM_POLICY_SIGNSOME,
	DK_POLICY_SIGNSOME,RCVD_IN_DNSWL_MED autolearn=ham version=3.2.2
Delivered-To: balister.org-philip@balister.org
Received: (qmail 12254 invoked by uid 1003); 18 Jul 2008 01:35:31 -0000
Received: from vger.kernel.org (209.132.176.167)
  by mail.geekisp.com with SMTP; 18 Jul 2008 01:35:31 -0000
Received: (majordomo@vger.kernel.org) by vger.kernel.org via listexpand
	id S1756410AbYGRBfa (ORCPT <rfc822;philip@balister.org>);
	Thu, 17 Jul 2008 21:35:30 -0400
Received: (majordomo@vger.kernel.org) by vger.kernel.org id S1757008AbYGRBfa
	(ORCPT <rfc822;linux-omap-outgoing>);
	Thu, 17 Jul 2008 21:35:30 -0400
Received: from utopia.booyaka.com ([72.9.107.138]:49368 "EHLO
	utopia.booyaka.com" rhost-flags-OK-OK-OK-OK) by vger.kernel.org
	with ESMTP id S1756410AbYGRBfZ (ORCPT
	<rfc822;linux-omap@vger.kernel.org>); Thu, 17 Jul 2008 21:35:25 -0400
Received: (qmail 13896 invoked by uid 526); 18 Jul 2008 01:35:24 -0000
MBOX-Line: From nobody Thu Jul 17 19:34:55 2008
From:	Paul Walmsley <paul@pwsan.com>
Subject: [PATCH 8/9] TWL4030: use symbolic ISR/IMR register names during
	twl_init_irq()
To:	linux-omap@vger.kernel.org
Date:	Thu, 17 Jul 2008 19:34:55 -0600
Message-ID: <20080718013454.18943.7428.stgit@localhost.localdomain>
In-Reply-To: <20080718013205.18943.34047.stgit@localhost.localdomain>
References: <20080718013205.18943.34047.stgit@localhost.localdomain>
User-Agent: StGIT/0.14.3.163.g06f9
MIME-Version: 1.0
Content-Type: text/plain; charset="utf-8"
Content-Transfer-Encoding: 7bit
Sender:	linux-omap-owner@vger.kernel.org
Precedence: bulk
List-ID: <linux-omap.vger.kernel.org>
X-Mailing-List:	linux-omap@vger.kernel.org

twl_init_irq() uses a bunch of magic numbers as register indices; this
has already led to several errors, fixed earlier in this patch series.
Now use descriptive macros instead of magic numbers.  This patch should
not change kernel behavior.

Signed-off-by: Paul Walmsley <paul@pwsan.com>
---

 drivers/i2c/chips/twl4030-core.c |  181 +++++++++++++++++++-------------------
 1 files changed, 89 insertions(+), 92 deletions(-)

diff --git a/drivers/i2c/chips/twl4030-core.c b/drivers/i2c/chips/twl4030-core.c
index 1906635..5855f5f 100644
--- a/drivers/i2c/chips/twl4030-core.c
+++ b/drivers/i2c/chips/twl4030-core.c
@@ -40,6 +40,9 @@
 
 #include <linux/i2c.h>
 #include <linux/i2c/twl4030.h>
+#include <linux/i2c/twl4030-gpio.h>
+#include <linux/i2c/twl4030-madc.h>
+#include <linux/i2c/twl4030-pwrirq.h>
 #include <linux/slab.h>
 #include <linux/clk.h>
 #include <linux/device.h>
@@ -114,6 +117,23 @@
 #define TWL4030_BASEADD_RTC		0x001C
 #define TWL4030_BASEADD_SECURED_REG	0x0000
 
+/* TWL4030 BCI registers */
+#define TWL4030_INTERRUPTS_BCIIMR1A	0x2
+#define TWL4030_INTERRUPTS_BCIIMR2A	0x3
+#define TWL4030_INTERRUPTS_BCIIMR1B	0x6
+#define TWL4030_INTERRUPTS_BCIIMR2B	0x7
+#define TWL4030_INTERRUPTS_BCIISR1A	0x0
+#define TWL4030_INTERRUPTS_BCIISR2A	0x1
+#define TWL4030_INTERRUPTS_BCIISR1B	0x4
+#define TWL4030_INTERRUPTS_BCIISR2B	0x5
+
+/* TWL4030 keypad registers */
+#define TWL4030_KEYPAD_KEYP_IMR1	0x12
+#define TWL4030_KEYPAD_KEYP_IMR2	0x14
+#define TWL4030_KEYPAD_KEYP_ISR1	0x11
+#define TWL4030_KEYPAD_KEYP_ISR2	0x13
+
+
 /* Triton Core internal information (END) */
 
 /* Few power values */
@@ -748,108 +768,85 @@ static void twl_init_irq(void)
 	 * handlers present.
 	 */
 
-	/* PWR_IMR1 */
-	WARN_ON(twl4030_i2c_write_u8(TWL4030_MODULE_INT, 0xff, 0x1) < 0);
-
-	/* PWR_IMR2 */
-	WARN_ON(twl4030_i2c_write_u8(TWL4030_MODULE_INT, 0xff, 0x3) < 0);
-
-	/* Clear off any other pending interrupts on power */
-	/* PWR_ISR1 */
-	WARN_ON(twl4030_i2c_clear_isr(TWL4030_MODULE_INT, 0x00) < 0);
-
-	/* PWR_ISR2 */
-	WARN_ON(twl4030_i2c_clear_isr(TWL4030_MODULE_INT, 0x02) < 0);
+	/* Mask INT (PWR) interrupts at TWL4030 */
+	WARN_ON(twl4030_i2c_write_u8(TWL4030_MODULE_INT, 0xff,
+				     TWL4030_INT_PWR_IMR1) < 0);
+	WARN_ON(twl4030_i2c_write_u8(TWL4030_MODULE_INT, 0xff,
+				     TWL4030_INT_PWR_IMR2) < 0);
+	/* Clear TWL4030 INT (PWR) ISRs */
+	WARN_ON(twl4030_i2c_clear_isr(TWL4030_MODULE_INT,
+				      TWL4030_INT_PWR_ISR1) < 0);
+	WARN_ON(twl4030_i2c_clear_isr(TWL4030_MODULE_INT,
+				      TWL4030_INT_PWR_ISR2) < 0);
 
 	/* Slave address 0x4A */
 
-	/* BCIIMR1A */
-	WARN_ON(twl4030_i2c_write_u8(TWL4030_MODULE_INTERRUPTS, 0xff, 0x2) < 0);
-
-	/* BCIIMR2A  */
-	WARN_ON(twl4030_i2c_write_u8(TWL4030_MODULE_INTERRUPTS, 0xff, 0x3) < 0);
-
-	/* BCIIMR2A */
-	WARN_ON(twl4030_i2c_write_u8(TWL4030_MODULE_INTERRUPTS, 0xff, 0x6) < 0);
-
-	/* BCIIMR2B */
-	WARN_ON(twl4030_i2c_write_u8(TWL4030_MODULE_INTERRUPTS, 0xff, 0x7) < 0);
-
-	/* BCIISR1A */
-	WARN_ON(twl4030_i2c_clear_isr(TWL4030_MODULE_INTERRUPTS, 0x0) < 0);
-
-	/* BCIISR2A */
-	WARN_ON(twl4030_i2c_clear_isr(TWL4030_MODULE_INTERRUPTS, 0x1) < 0);
-
-	/* BCIISR1B */
-	WARN_ON(twl4030_i2c_clear_isr(TWL4030_MODULE_INTERRUPTS, 0x4) < 0);
-
-	/* BCIISR2B */
-	WARN_ON(twl4030_i2c_clear_isr(TWL4030_MODULE_INTERRUPTS, 0x5) < 0);
+	/* Mask BCI interrupts at TWL4030 */
+	WARN_ON(twl4030_i2c_write_u8(TWL4030_MODULE_INTERRUPTS, 0xff,
+				     TWL4030_INTERRUPTS_BCIIMR1A) < 0);
+	WARN_ON(twl4030_i2c_write_u8(TWL4030_MODULE_INTERRUPTS, 0xff,
+				     TWL4030_INTERRUPTS_BCIIMR2A) < 0);
+	WARN_ON(twl4030_i2c_write_u8(TWL4030_MODULE_INTERRUPTS, 0xff,
+				     TWL4030_INTERRUPTS_BCIIMR1B) < 0);
+	WARN_ON(twl4030_i2c_write_u8(TWL4030_MODULE_INTERRUPTS, 0xff,
+				     TWL4030_INTERRUPTS_BCIIMR2B) < 0);
+	/* Clear TWL4030 BCI ISRs */
+	WARN_ON(twl4030_i2c_clear_isr(TWL4030_MODULE_INTERRUPTS,
+				      TWL4030_INTERRUPTS_BCIISR1A) < 0);
+	WARN_ON(twl4030_i2c_clear_isr(TWL4030_MODULE_INTERRUPTS,
+				      TWL4030_INTERRUPTS_BCIISR2A) < 0);
+	WARN_ON(twl4030_i2c_clear_isr(TWL4030_MODULE_INTERRUPTS,
+				      TWL4030_INTERRUPTS_BCIISR1B) < 0);
+	WARN_ON(twl4030_i2c_clear_isr(TWL4030_MODULE_INTERRUPTS,
+				      TWL4030_INTERRUPTS_BCIISR2B) < 0);
 
 	/* MAD C */
-	/* MADC_IMR1 */
-	WARN_ON(twl4030_i2c_write_u8(TWL4030_MODULE_MADC, 0xff, 0x62) < 0);
-
-	/* MADC_IMR2 */
-	WARN_ON(twl4030_i2c_write_u8(TWL4030_MODULE_MADC, 0xff, 0x64) < 0);
-
-	/* MADC_ISR1 */
-	WARN_ON(twl4030_i2c_clear_isr(TWL4030_MODULE_MADC, 0x61) < 0);
-
-	/* MADC_ISR2 */
-	WARN_ON(twl4030_i2c_clear_isr(TWL4030_MODULE_MADC, 0x63) < 0);
+	/* Mask MADC interrupts at TWL4030 */
+	WARN_ON(twl4030_i2c_write_u8(TWL4030_MODULE_MADC, 0xff,
+				     TWL4030_MADC_IMR1) < 0);
+	WARN_ON(twl4030_i2c_write_u8(TWL4030_MODULE_MADC, 0xff,
+				     TWL4030_MADC_IMR2) < 0);
+	/* Clear TWL4030 MADC ISRs */
+	WARN_ON(twl4030_i2c_clear_isr(TWL4030_MODULE_MADC,
+				      TWL4030_MADC_ISR1) < 0);
+	WARN_ON(twl4030_i2c_clear_isr(TWL4030_MODULE_MADC,
+				      TWL4030_MADC_ISR2) < 0);
 
 	/* key Pad */
-	/* KEYPAD - IMR1 */
-	WARN_ON(twl4030_i2c_write_u8(TWL4030_MODULE_KEYPAD, 0xff, 0x12) < 0);
-
-	/* KEYPAD - ISR1 */
+	/* Mask keypad interrupts at TWL4030 */
+	WARN_ON(twl4030_i2c_write_u8(TWL4030_MODULE_KEYPAD, 0xff,
+				     TWL4030_KEYPAD_KEYP_IMR1) < 0);
+	WARN_ON(twl4030_i2c_write_u8(TWL4030_MODULE_KEYPAD, 0xff,
+				     TWL4030_KEYPAD_KEYP_IMR2) < 0);
+	/* Clear TWL4030 keypad ISRs */
 	/* XXX does this still need to be done twice for some reason? */
-	WARN_ON(twl4030_i2c_clear_isr(TWL4030_MODULE_KEYPAD, 0x11) < 0);
-
-	/* KEYPAD - IMR2 */
-	WARN_ON(twl4030_i2c_write_u8(TWL4030_MODULE_KEYPAD, 0xff, 0x14) < 0);
-
-	/* KEYPAD - ISR2 */
-	WARN_ON(twl4030_i2c_clear_isr(TWL4030_MODULE_KEYPAD, 0x13) < 0);
+	WARN_ON(twl4030_i2c_clear_isr(TWL4030_MODULE_KEYPAD,
+				      TWL4030_KEYPAD_KEYP_ISR1) < 0);
+	WARN_ON(twl4030_i2c_clear_isr(TWL4030_MODULE_KEYPAD,
+				      TWL4030_KEYPAD_KEYP_ISR2) < 0);
 
 	/* Slave address 0x49 */
-	/* GPIO_IMR1A */
-	WARN_ON(twl4030_i2c_write_u8(TWL4030_MODULE_GPIO, 0xff, 0x1c) < 0);
-
-	/* GPIO_IMR2A */
-	WARN_ON(twl4030_i2c_write_u8(TWL4030_MODULE_GPIO, 0xff, 0x1d) < 0);
-
-	/* GPIO_IMR3A */
-	WARN_ON(twl4030_i2c_write_u8(TWL4030_MODULE_GPIO, 0xff, 0x1e) < 0);
-
-	/* GPIO_IMR1B */
-	WARN_ON(twl4030_i2c_write_u8(TWL4030_MODULE_GPIO, 0xff, 0x22) < 0);
-
-	/* GPIO_IMR2B */
-	WARN_ON(twl4030_i2c_write_u8(TWL4030_MODULE_GPIO, 0xff, 0x23) < 0);
-
-	/* GPIO_IMR3B */
-	WARN_ON(twl4030_i2c_write_u8(TWL4030_MODULE_GPIO, 0xff, 0x24) < 0);
-
-	/* GPIO_ISR1A */
-	WARN_ON(twl4030_i2c_clear_isr(TWL4030_MODULE_GPIO, 0x19) < 0);
-
-	/* GPIO_ISR2A */
-	WARN_ON(twl4030_i2c_clear_isr(TWL4030_MODULE_GPIO, 0x1a) < 0);
-
-	/* GPIO_ISR3A */
-	WARN_ON(twl4030_i2c_clear_isr(TWL4030_MODULE_GPIO, 0x1b) < 0);
-
-	/* GPIO_ISR1B */
-	WARN_ON(twl4030_i2c_clear_isr(TWL4030_MODULE_GPIO, 0x1f) < 0);
-
-	/* GPIO_ISR2B */
-	WARN_ON(twl4030_i2c_clear_isr(TWL4030_MODULE_GPIO, 0x20) < 0);
-
-	/* GPIO_ISR3B */
-	WARN_ON(twl4030_i2c_clear_isr(TWL4030_MODULE_GPIO, 0x21) < 0);
+	/* Mask GPIO interrupts at TWL4030 */
+	WARN_ON(twl4030_i2c_write_u8(TWL4030_MODULE_GPIO, 0xff,
+				     REG_GPIO_IMR1A) < 0);
+	WARN_ON(twl4030_i2c_write_u8(TWL4030_MODULE_GPIO, 0xff,
+				     REG_GPIO_IMR2A) < 0);
+	WARN_ON(twl4030_i2c_write_u8(TWL4030_MODULE_GPIO, 0xff,
+				     REG_GPIO_IMR3A) < 0);
+	WARN_ON(twl4030_i2c_write_u8(TWL4030_MODULE_GPIO, 0xff,
+				     REG_GPIO_IMR1B) < 0);
+	WARN_ON(twl4030_i2c_write_u8(TWL4030_MODULE_GPIO, 0xff,
+				     REG_GPIO_IMR2B) < 0);
+	WARN_ON(twl4030_i2c_write_u8(TWL4030_MODULE_GPIO, 0xff,
+				     REG_GPIO_IMR3B) < 0);
+
+	/* Clear TWL4030 GPIO ISRs */
+	WARN_ON(twl4030_i2c_clear_isr(TWL4030_MODULE_GPIO, REG_GPIO_ISR1A) < 0);
+	WARN_ON(twl4030_i2c_clear_isr(TWL4030_MODULE_GPIO, REG_GPIO_ISR2A) < 0);
+	WARN_ON(twl4030_i2c_clear_isr(TWL4030_MODULE_GPIO, REG_GPIO_ISR3A) < 0);
+	WARN_ON(twl4030_i2c_clear_isr(TWL4030_MODULE_GPIO, REG_GPIO_ISR1B) < 0);
+	WARN_ON(twl4030_i2c_clear_isr(TWL4030_MODULE_GPIO, REG_GPIO_ISR2B) < 0);
+	WARN_ON(twl4030_i2c_clear_isr(TWL4030_MODULE_GPIO, REG_GPIO_ISR3B) < 0);
 
 	/* install an irq handler for each of the PIH modules */
 	for (i = TWL4030_IRQ_BASE; i < TWL4030_IRQ_END; i++) {


--
To unsubscribe from this list: send the line "unsubscribe linux-omap" in
the body of a message to majordomo@vger.kernel.org
More majordomo info at  http://vger.kernel.org/majordomo-info.html

